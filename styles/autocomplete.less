@import "ui-variables";
@import "syntax-variables";

@type-icon-font-size: @font-size + 2px;
@type-icon-offset: 0px;
@type-icon-size: @component-line-height - @type-icon-offset * 2;
@type-icon-border-radius: 0px;

atom-overlay.autocomplete-plus {
  z-index: 5;
}

autocomplete-suggestion-list.select-list.popover-list {
  width: auto;
  display: inline-block;
  min-width: 200px;
  overflow-y: auto;
  padding: 0;
  max-width: 700px;

  .docstring {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  hr {
    margin: 4px;
    height: 1px;
    background-color: @text-color-subtle;
    color: @text-color-subtle;
  }

  input {
    position: absolute;
    opacity: 0.00;
  }

  ol.list-group {
    margin-top: 0;
    display: table;
    width: 100%;

    li {
      display: table-row;
      color: @text-color;

      > span {
        display: table-cell;
        vertical-align: middle;
      }

      &:after {
        clear: both;
        display: block;
        content: ' ';
      }

      &.selected {
        .character-match {
          color: @text-color-selected;
        }
        .completion-label, .snippet-completion {
          color: fadeout(@text-color-selected, 60%);
        }
      }
    }
  }
}

autocomplete-suggestion-list {
  .icon-container {
    width: @type-icon-size;
    padding-left: @type-icon-offset;
    padding-right: @component-padding;
    &:empty {
      width: 0;
      padding: 0 0 0 @component-padding / 2;
    }
  }

  .icon {
    display: block;
    width: @type-icon-size;
    height: @type-icon-size;
    line-height: @type-icon-size - 2px;
    border-radius: @type-icon-border-radius;
    display: block;
    text-align: center;
    font-style: normal;
    font-weight: bold;
    font-size: @type-icon-font-size;
    vertical-align: middle;

    color: @text-color-subtle;
    background: fadeout(@text-color, 90%);

    &:empty { display: none; }
    > *::before {
      font-size: @type-icon-font-size;
      width: @type-icon-font-size;
      height: @type-icon-font-size;
    }
  }

  .left-label {
    text-align: right;
    padding-right: @component-padding;

    font-size: .9em;
    color: @text-color-subtle;

    &:empty {
      padding: 0;
    }
  }

  .right-label {
    float: right;
    padding-left: @component-padding;
    padding-right: @component-padding / 2;

    font-size: .9em;
    color: @text-color-subtle;

    &:empty {
      padding: 0 @component-padding / 2 0 0;
    }
  }

  .word {
    // TODO: The 600px is arbitrary. We need to make it butt up against the
    // right of the window.
    float: left;
    max-width: 600px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .character-match {
    font-weight: bold;
    color: @text-color-highlight;
  }

  .snippet-completion {
    color: @text-color-subtle;
  }

  .make-type-icon(variable, @syntax-color-variable);
  .make-type-icon(constant, @syntax-color-constant);
  .make-type-icon(property, @syntax-color-property);
  .make-type-icon(value, @syntax-color-value);
  .make-type-icon(method, @syntax-color-method);
  .make-type-icon(function, @syntax-color-function);
  .make-type-icon(class, @syntax-color-class);
  .make-type-icon(type, @syntax-color-class);
  .make-type-icon(keyword, @syntax-color-keyword);
  .make-type-icon(builtin, @syntax-color-keyword);
  .make-type-icon(tag, @syntax-color-tag);
  .make-type-icon(import, @syntax-color-import);
  .make-type-icon(require, @syntax-color-import);
  .make-type-icon(snippet, @syntax-color-snippet);
}

.make-type-icon(@type, @color) {
  .icon.@{type} {
    color: @color;
    background: fadeout(@color, 80%)
  }
}
